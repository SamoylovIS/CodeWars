def valid_solution(board):
    key = 0
    ley = 0
    fey = 0
    a = []
    b = []
    c = []
    v1 = []
    v2 = []
    v3 = []
    v4 = []
    v5 = []
    v6 = []
    v7 = []
    v8 = []
    v9 = []
    for i in board:
        for j in i:
            if j==0:
                return False
        if len(set(i))==9:
            key+=1
            a.append(i[0]),a.append(i[1]),a.append(i[2])
            b.append(i[3]),b.append(i[4]),b.append(i[5])
            c.append(i[6]),c.append(i[7]),c.append(i[8])
            v1.append(i[0]),v2.append(i[1]),v3.append(i[2])
            v4.append(i[3]),v5.append(i[4]),v6.append(i[5])
            v7.append(i[6]),v8.append(i[7]),v9.append(i[8])
            if len(a) == 9 and len(b) == 9 and len(c) == 9:
                if len(set(a)) and len(set(b)) and len(set(c)) == 9:
                    a.clear()
                    b.clear()
                    c.clear()
                    ley+=3
                else:
                    return False
    if len(set(v1)) and len(set(v2)) and len(set(v3)) and len(set(v4)) and len(set(v5)) and len(set(v6)) and len(set(v7)) and len(set(v8)) and len(set(v9)) == 9:
        return True
    else:
        return False
    if key == 9 and ley == 9:
        return True
    else:
        return False

# Best way
#correct = [1, 2, 3, 4, 5, 6, 7, 8, 9]
#
#def validSolution(board):
#    # check rows
#    for row in board:
#        if sorted(row) != correct:
#            return False
#    
#    # check columns
#    for column in zip(*board):
#        if sorted(column) != correct:
#            return False
#    
#    # check regions
#    for i in range(3):
#        for j in range(3):
#            region = []
#            for line in board[i*3:(i+1)*3]:
#                region += line[j*3:(j+1)*3]
#            
#            if sorted(region) != correct:
#                return False
#    
#    # if everything correct
#    return True